{"version":3,"file":"TableCell.js","sourceRoot":"","sources":["../src/TableCell.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,gDAA2D;AAC3D,iCAAqE;AA2DrE;IAA+B,6BAE9B;IAFD;;IAqCA,CAAC;IAlCC,0BAAM,GAAN;;QACE,IAAI,OAAY,CAAC;QAEjB,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,QAAQ,EAAE;YAC3C,OAAO,GAAG,oBAAC,eAAI,QAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAQ,CAAC;SAC9C;aAAM,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,QAAQ,EAAE;YAClD,OAAO,GAAG,oBAAC,eAAI,QAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAQ,CAAC;SACzD;aAAM;YACL,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;SAC/B;QAEO,IAAA,kBAAkB,GAAK,IAAA,gCAAwB,EAAC,IAAI,CAAC,KAAK,CAAC,mBAAzC,CAA0C;QACpE,IAAM,YAAY,GAAmB;YACnC,IAAI,EAAE,MAAA,IAAI,CAAC,KAAK,CAAC,SAAS,mCAAI,CAAC;YAE/B,cAAc,EAAE,SAAS;YACzB,SAAS,EAAE,MAAA,IAAI,CAAC,KAAK,CAAC,SAAS,mCAAI,MAAM;YACzC,QAAQ,EAAE,MAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,mCAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YACzE,WAAW,EAAE,kBAAkB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAChE,QAAQ,EAAE,YAAY;YACtB,UAAU,EAAE,UAAU;SACvB,CAAC;QAEF,IAAM,YAAY;YAChB,YAAY;WACT,IAAA,wBAAgB,EAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OACtC,CAAC;QAEF,OAAO,CACL,oBAAC,eAAI,IAAC,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,IAClC,OAAO,CACH,CACR,CAAC;IACJ,CAAC;IACH,gBAAC;AAAD,CAAC,AArCD,CAA+B,KAAK,CAAC,aAAa,GAqCjD;AArCY,8BAAS","sourcesContent":["import * as React from 'react';\nimport ReactPDF, { Text, View } from '@react-pdf/renderer';\nimport { getDefaultBorderIncludes, transformToArray } from './Utils';\n\n/**\n * Whether to include borders or not.\n * Depending on the context some toggles will not have any effect.\n */\nexport interface TableBorder {\n  /**\n   * Include the top border. Default true.\n   */\n  includeTopBorder?: boolean;\n\n  /**\n   * Include the right border. Default true.\n   */\n  includeRightBorder?: boolean;\n\n  /**\n   * Include the bottom border. Default true.\n   */\n  includeBottomBorder?: boolean;\n\n  /**\n   * Include the left border. Default true.\n   */\n  includeLeftBorder?: boolean;\n}\n\nexport interface TableCellProps extends TableBorder {\n  /**\n   * The weighting of a cell based on the flex layout style.\n   * This value is between 0..1, if not specified 1 is assumed, this will take up the remaining available space.\n   */\n  weighting?: number;\n\n  /**\n   * Extra styling to apply. These will override existing style with the same key.\n   */\n  style?: ReactPDF.Style | ReactPDF.Style[];\n\n  /**\n   * How to align the text\n   */\n  textAlign?: 'left' | 'center' | 'right';\n\n  /**\n   * Whether this is a header cell or not. If not defined it will be false.\n   */\n  isHeader?: boolean;\n\n  /**\n   * The font-size to apply to the cell.\n   */\n  fontSize?: number | string;\n}\n\n/**\n * This component displays the associated content of it's children.\n */\nexport class TableCell extends React.PureComponent<\n  React.PropsWithChildren<TableCellProps>\n> {\n  render() {\n    let content: any;\n\n    if (typeof this.props.children === 'string') {\n      content = <Text>{this.props.children}</Text>;\n    } else if (typeof this.props.children === 'number') {\n      content = <Text>{this.props.children.toString()}</Text>;\n    } else {\n      content = this.props.children;\n    }\n\n    const { includeRightBorder } = getDefaultBorderIncludes(this.props);\n    const defaultStyle: ReactPDF.Style = {\n      flex: this.props.weighting ?? 1,\n      // @ts-ignore\n      justifyContent: 'stretch',\n      textAlign: this.props.textAlign ?? 'left',\n      fontSize: this.props.fontSize ?? (this.props.isHeader === true ? 14 : 12),\n      borderRight: includeRightBorder === true ? '1pt solid black' : 0,\n      wordWrap: 'break-word',\n      whiteSpace: 'pre-wrap',\n    };\n\n    const mergedStyles: ReactPDF.Style[] = [\n      defaultStyle,\n      ...transformToArray(this.props.style),\n    ];\n\n    return (\n      <View style={mergedStyles} wrap={true}>\n        {content}\n      </View>\n    );\n  }\n}\n"]}