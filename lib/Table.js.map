{"version":3,"file":"Table.js","sourceRoot":"","sources":["../src/Table.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,6CAA4C;AAC5C,yCAAwC;AACxC,gDAA2C;AAmC3C;IAA2B,yBAE1B;IAFD;;IAuCA,CAAC;IApCC,sBAAM,GAAN;;QACE,IAAI,WAAW,GAAuB,IAAI,CAAC;QAC3C,IAAI,SAAS,GAAuB,IAAI,CAAC;QAEzC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAC,CAAqB;YAChE,IAAI,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,IAAI,MAAK,yBAAW,EAAE;gBAC3B,WAAW,GAAG,CAAC,CAAC;aACjB;iBAAM,IAAI,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,IAAI,MAAK,qBAAS,EAAE;gBAChC,SAAS,GAAG,CAAC,CAAC;aACf;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,SAAS,KAAK,IAAI,EAAE;YACtB,SAAS,GAAG,KAAK,CAAC,aAAa,CAAC,qBAAS,CAAC,CAAC;SAC5C;QAED,SAAS,GAAG,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE;YACxC,IAAI,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,IAAI,mCAAI,IAAI,CAAC,KAAK,CAAC,IAAI,mCAAI,EAAE;YACrD,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW;YAC3D,KAAK,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,KAAK,mCAAI,IAAI,CAAC,KAAK,CAAC,KAAK,mCAAI,KAAK;YAC3D,YAAY,EACV,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,YAAY,mCAAI,IAAI,CAAC,KAAK,CAAC,YAAY,mCAAI,EAAE;YACjE,WAAW,EACT,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,WAAW,mCAAI,IAAI,CAAC,KAAK,CAAC,WAAW,mCAAI,EAAE;SAChE,CAAC,CAAC;QAEH,OAAO,CACL,oBAAC,eAAI,IACH,KAAK,EAAE;gBACL,KAAK,EAAE,MAAM;aACd;YACA,WAAW;YACX,SAAS,CACL,CACR,CAAC;IACJ,CAAC;IACH,YAAC;AAAD,CAAC,AAvCD,CAA2B,KAAK,CAAC,aAAa,GAuC7C;AAvCY,sBAAK","sourcesContent":["import * as React from 'react';\nimport { TableHeader } from './TableHeader';\nimport { TableBody } from './TableBody';\nimport { View } from '@react-pdf/renderer';\n\nexport interface ZebraProps {\n  /**\n   * Whether to display alternate row colours.\n   * Defaults to false.\n   */\n  zebra?: boolean;\n\n  /**\n   * The even row colour when {@see zebra} is true.\n   * Defaults to lightgray if not defined.\n   */\n  evenRowColor?: string;\n\n  /**\n   * The odd row colour when {@see zebra} is true.\n   * Defaults to transparent or '' if not defined.\n   */\n  oddRowColor?: string;\n}\n\nexport interface TableProps extends ZebraProps {\n  /**\n   * The table data to display.\n   */\n  data?: any[];\n\n  /**\n   * Indicates that this is a nested table.\n   * Otherwise assumed to be false.\n   */\n  isNested?: boolean;\n}\n\nexport class Table extends React.PureComponent<\n  React.PropsWithChildren<TableProps>\n> {\n  render() {\n    let tableHeader: React.ReactElement = null;\n    let tableBody: React.ReactElement = null;\n\n    React.Children.forEach(this.props.children, (c: React.ReactElement) => {\n      if (c?.type === TableHeader) {\n        tableHeader = c;\n      } else if (c?.type === TableBody) {\n        tableBody = c;\n      }\n    });\n\n    if (tableBody === null) {\n      tableBody = React.createElement(TableBody);\n    }\n\n    tableBody = React.cloneElement(tableBody, {\n      data: tableBody?.props?.data ?? this.props.data ?? [],\n      renderTopBorder: this.props.isNested ? false : !tableHeader,\n      zebra: tableBody?.props?.zebra ?? this.props.zebra ?? false,\n      evenRowColor:\n        tableBody?.props?.evenRowColor ?? this.props.evenRowColor ?? '',\n      oddRowColor:\n        tableBody?.props?.oddRowColor ?? this.props.oddRowColor ?? '',\n    });\n\n    return (\n      <View\n        style={{\n          width: '100%',\n        }}>\n        {tableHeader}\n        {tableBody}\n      </View>\n    );\n  }\n}\n"]}