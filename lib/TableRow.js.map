{"version":3,"file":"TableRow.js","sourceRoot":"","sources":["../src/TableRow.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAG/B,gDAA2C;AAC3C,iCAAmD;AA2CnD;IAA8B,4BAE7B;IAFD;;IAyDA,CAAC;IAtDC,yBAAM,GAAN;QAAA,iBAqDC;QApDC,IAAM,QAAQ,GAAU,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC9D,IAAA,KAKF,IAAA,gCAAwB,EAAC,IAAI,CAAC,KAAK,CAAC,EAJtC,iBAAiB,uBAAA,EACjB,mBAAmB,yBAAA,EACnB,kBAAkB,wBAAA,EAClB,gBAAgB,sBACsB,CAAC;QAEzC,IAAI,kBAAkB,GAAG,CAAC,CAAC;QAC3B,IAAI,yBAAyB,GAAG,CAAC,CAAC;QAClC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAA4B;YAC5C,IAAI,CAAC,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS,EAAE;gBACnC,kBAAkB,IAAI,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC;gBACxC,yBAAyB,EAAE,CAAC;aAC7B;QACH,CAAC,CAAC,CAAC;QAEH,IAAM,yBAAyB,GAAG,IAAI,CAAC,IAAI,CACzC,kBAAkB,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,yBAAyB,CAAC,CACnE,CAAC;QAEF,IAAM,QAAQ,GACZ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI;YAC9D,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,WAAW;YACxC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC;QAEnC,OAAO,CACL,oBAAC,eAAI,IACH,KAAK,EAAE;gBACL,YAAY,EAAE,mBAAmB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBAClE,WAAW,EAAE,kBAAkB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBAChE,UAAU,EAAE,iBAAiB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBAC9D,SAAS,EAAE,gBAAgB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBAC5D,KAAK,EAAE,MAAM;gBACb,OAAO,EAAE,MAAM;gBACf,aAAa,EAAE,KAAK;gBACpB,cAAc,EAAE,eAAe;gBAC/B,eAAe,EAAE,QAAQ;aAC1B,IACA,QAAQ,CAAC,GAAG,CAAC,UAAC,EAAE,EAAE,WAAW;;YAC5B,OAAA,KAAK,CAAC,YAAY,CAAC,EAAE,EAAE;gBACrB,SAAS,EAAE,MAAA,EAAE,CAAC,KAAK,CAAC,SAAS,mCAAI,yBAAyB;gBAC1D,IAAI,EAAE,KAAI,CAAC,KAAK,CAAC,IAAI;gBACrB,GAAG,EAAE,WAAW;gBAChB,QAAQ,EAAE,KAAI,CAAC,KAAK,CAAC,QAAQ;gBAC7B,SAAS,EAAE,KAAI,CAAC,KAAK,CAAC,SAAS;gBAC/B,iBAAiB,EAAE,WAAW,KAAK,CAAC;gBACpC,kBAAkB,EAAE,WAAW,KAAK,QAAQ,CAAC,MAAM,GAAG,CAAC;aACxD,CAAC,CAAA;SAAA,CACH,CACI,CACR,CAAC;IACJ,CAAC;IACH,eAAC;AAAD,CAAC,AAzDD,CAA8B,KAAK,CAAC,aAAa,GAyDhD;AAzDY,4BAAQ","sourcesContent":["import * as React from 'react';\nimport { TableBorder, TableCell } from './TableCell';\nimport { DataTableCell } from './DataTableCell';\nimport { View } from '@react-pdf/renderer';\nimport { getDefaultBorderIncludes } from './Utils';\nimport { TableBodyProps } from './TableBody';\n\nexport interface TableRowProps extends TableBorder {\n  /**\n   * The font size as a valid unit defined in react-pdf.\n   */\n  fontSize?: number | string;\n\n  /**\n   * Whether to align the text. Defaults to left.\n   */\n  textAlign?: 'left' | 'center' | 'right';\n\n  /**\n   * Any data associated, relevant if the parent is a {@see DataTableCell}.\n   */\n  data?: any;\n\n  /**\n   * Whether rows have alternating styles\n   */\n  zebra?: boolean;\n\n  /**\n   * Whether this row is even (true) or odd (false)\n   */\n  even?: boolean;\n\n  /**\n   * Specify the color of even rows\n   */\n  evenRowColor?: string;\n\n  /**\n   * Specify the color of odd rows\n   */\n  oddRowColor?: string;\n}\n\n/**\n * This component describes how to display a row.\n */\nexport class TableRow extends React.PureComponent<\n  Partial<React.PropsWithChildren<TableBodyProps>>\n> {\n  render() {\n    const rowCells: any[] = React.Children.toArray(this.props.children);\n    const {\n      includeLeftBorder,\n      includeBottomBorder,\n      includeRightBorder,\n      includeTopBorder,\n    } = getDefaultBorderIncludes(this.props);\n\n    let remainingWeighting = 1;\n    let numberOfWeightingsDefined = 0;\n    rowCells.forEach((i: TableCell | DataTableCell) => {\n      if (i.props.weighting !== undefined) {\n        remainingWeighting -= i.props.weighting;\n        numberOfWeightingsDefined++;\n      }\n    });\n\n    const weightingsPerNotSpecified = Math.ceil(\n      remainingWeighting / (rowCells.length - numberOfWeightingsDefined)\n    );\n\n    const rowColor =\n      (this.props.zebra || this.props.evenRowColor) && this.props.even\n        ? this.props.evenRowColor || 'lightgray'\n        : this.props.oddRowColor || '';\n\n    return (\n      <View\n        style={{\n          borderBottom: includeBottomBorder === true ? '1pt solid black' : 0,\n          borderRight: includeRightBorder === true ? '1pt solid black' : 0,\n          borderLeft: includeLeftBorder === true ? '1pt solid black' : 0,\n          borderTop: includeTopBorder === true ? '1pt solid black' : 0,\n          width: '100%',\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n          backgroundColor: rowColor,\n        }}>\n        {rowCells.map((rc, columnIndex) =>\n          React.cloneElement(rc, {\n            weighting: rc.props.weighting ?? weightingsPerNotSpecified,\n            data: this.props.data,\n            key: columnIndex,\n            fontSize: this.props.fontSize,\n            textAlign: this.props.textAlign,\n            includeLeftBorder: columnIndex === 0,\n            includeRightBorder: columnIndex !== rowCells.length - 1,\n          })\n        )}\n      </View>\n    );\n  }\n}\n"]}